@page "/chat"
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@inject NavigationManager NavigationManager
@inject IAccessTokenProvider TokenProvider
@implements IAsyncDisposable

@attribute [Authorize]

<h1>Chat</h1>

<div class="form-group">
    <label>
        User:
        <input @bind="userInput" />
    </label>
</div>
<div class="form-group">
    <label>
        Message:
        <input @bind="messageInput" size="50" />
    </label>
</div>
<button @onclick="Send" disabled="@(!IsConnected)">Send</button>

<hr>

<ul id="messagesList">
    @foreach (var message in messages)
    {
        <li>@message</li>
    }
</ul>

@code {
private HubConnection hubConnection;
private List<string> messages = new List<string>();
private string userInput;
private string messageInput;

protected override async Task OnInitializedAsync()
{
    hubConnection = new HubConnectionBuilder()
        .WithUrl("https://localhost:49153/hubs/chat", options =>
        {
            options.AccessTokenProvider = async () =>
            {
                var tokenResult = await TokenProvider.RequestAccessToken();

                tokenResult.TryGetToken(out var accessToken);

                return accessToken.Value;
            };
        })
        .Build();

    hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
    {
        var encodedMsg = $"{user}: {message}";
        messages.Add(encodedMsg);
        StateHasChanged();
    });

    await hubConnection.StartAsync();
}

    //todo: use auth names
    Task Send() =>
        hubConnection.SendAsync("SendMessage", messageInput);

    public bool IsConnected =>
        hubConnection.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        await hubConnection.DisposeAsync();
    }
}